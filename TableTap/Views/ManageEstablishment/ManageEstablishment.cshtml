@model ManageEstablishmentViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<style>
    #table-pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 1rem;
    }

        #table-pagination .pagination-btn {
            padding: 0.5rem 1rem;
            border: 1px solid #ccc;
            background-color: #007bff;
            color: #fff;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            #table-pagination .pagination-btn:hover:not(:disabled) {
                background-color: #0056b3;
            }

            #table-pagination .pagination-btn:disabled {
                background-color: #e0e0e0;
                color: #888;
                cursor: not-allowed;
            }
</style>

<body>
    <div class="dashboard-wrapper">
        @await Html.PartialAsync("_AdminSidebar")
        <!-- Main Content -->
        <main class="dashboard-main">
            <div class="dashboard-header">
                <h1>Manage Restaurants</h1>
                <p>View and manage all restaurants on the platform.</p>
            </div>

            <div class="admin-actions">
                <div class="search-filter">
                    <div class="search-box">
                        <input type="text" placeholder="Search restaurants..." class="restaurant-search">
                        <button class="search-btn"><i class="fas fa-search"></i></button>
                    </div>
                    <div class="filter-box">
                        <select class="plan-filter">
                            <option value="">All Plans</option>
                            <option value="starter">Starter</option>
                            <option value="professional">Professional</option>
                            <option value="enterprise">Enterprise</option>
                        </select>
                        <select class="status-filter">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="pending">Pending</option>
                            <option value="suspended">Suspended</option>
                        </select>
                    </div>
                </div>
                <button class="btn btn-primary"><i class="fas fa-plus"></i> Add Restaurant</button>
            </div>

            <div class="card">
                <div class="card-content">
                    <div class="table-responsive">
                        <table class="admin-table" id="order-listing">
                            <thead>
                                <tr>
                                    <th>Restaurant</th>
                                    <th>Location</th>
                                    <th>Plan</th>
                                    @* <th>Status</th> *@
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                  @for(int i=0; i<Model.Establishments.Count; i++){
                                    <tr class="data-row">
                                        <td>
                                            <div class="restaurant-info">
                                                <img src="@(string.IsNullOrEmpty(Model.Establishments[i].ImagePath.ToString()) ? "/images/default.png" : Model.Establishments[i].ImagePath)"
                                                     alt="@Model.Establishments[i].Name" width="50" height="50">
                                                <div>
                                                    <div class="restaurant-name">@Model.Establishments[i].Name</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@Model.Establishments[i].CityId+ "," +@Model.Establishments[i].Address</td>
                                        <td>@(string.IsNullOrEmpty(Model.Establishments[i].Subscriptions[i].Plan.Name) ? "Not registered to paln" : Model.Establishments[i].Subscriptions[i].Plan.Name)</td>
                                       @*  <td>@()</td> *@
                                       <td class="actions">
                                            <button class="action-btn delete-btn"><i class="fas fa-trash"></i></button>
                                        </td>
                                    </tr>
                                     }
                            </tbody>
                        </table>
                    </div>
                    <div id="table-pagination" class="pagination">
                        <button id="prevPage" class="pagination-btn"><i class="fas fa-chevron-left"></i></button>

                        <button id="nextPage" class="pagination-btn"><i class="fas fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>

            <div class="modal" id="restaurantModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 id="modalTitle">Add Restaurant</h2>
                        <button class="modal-close"><i class="fas fa-times"></i></button>
                    </div>
                    <div class="modal-body">
                        <form asp-controller="ManageEstablishment" asp-action="AddEstablishment" method="post" enctype="multipart/form-data" id="restaurantForm" class="admin-form">
                            <input type="hidden" name="Id" id="city-id" />
                            <div class="form-group">
                                <label for="restaurant-name">Restaurant Name</label>
                                <input type="text" id="restaurant-name" name="Name" placeholder="Enter restaurant name" required>
                            </div>

                            <div class="form-group">
                                <label for="restaurant-city">City</label>
                                <select id="restaurant-city" name="CityId" class="form-control" required>
                                    <option value="">Select a city</option>
                                    @foreach (var city in Model.Cities)
                                    {
                                        <option value="@city.Id">@city.Name</option>
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="restaurant-address">Address</label>
                                <input type="text" id="restaurant-address" name="Address" placeholder="Enter address" required>
                            </div>

                            @*  <div class="form-group">
                                <label for="restaurant-plan">Subscription Plan</label>
                                <select id="restaurant-plan" name="Subscriptions" required>
                                    <option value="">Select a plan</option>
                                    <option value="Free">Free</option>
                                    <option value="Basic">Basic</option>
                                    <option value="Professional">Professional</option>
                                    <option value="Enterprise">Enterprise</option>
                                </select>
                            </div> *@
                            <div class="form-group">
                                <label class="form-label">Establishment Image</label>
                                <input type="file" name="Image">
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-outline modal-close">Cancel</button>
                                <button type="submit" form="restaurantForm" class="btn btn-primary">Save Restaurant</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

           @*  <div class="modal" id="paymentRequestModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Payment Request Details</h2>
                        <button class="modal-close"><i class="fas fa-times"></i></button>
                    </div>
                    <div class="modal-body">
                        <div class="request-details">
                            <div class="detail-row">
                                <div class="detail-label">Request ID:</div>
                                <div class="detail-value">#PR-1234</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Restaurant:</div>
                                <div class="detail-value">Pasta Paradise (#12345)</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Plan:</div>
                                <div class="detail-value">Professional - Monthly</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Amount:</div>
                                <div class="detail-value">$79.00</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Payment Method:</div>
                                <div class="detail-value">Credit Card (Visa ending in 4242)</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Date Requested:</div>
                                <div class="detail-value">May 1, 2023 at 10:24 AM</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Status:</div>
                                <div class="detail-value"><span class="status-badge pending">Pending</span></div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Notes:</div>
                                <div class="detail-value">Monthly subscription renewal for Professional plan.</div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-outline">Close</button>
                        <button class="btn btn-danger">Reject</button>
                        <button class="btn btn-primary">Approve</button>
                    </div>
                </div>
            </div> *@

        </main>
    </div>
    <script>
        const editButtons = document.querySelectorAll('.card-footer .btn:first-child');
        const addButton = document.querySelector('.admin-actions .btn-primary');
        const modal = document.getElementById('restaurantModal');
        const modalClose = document.querySelector('.modal-close');
        const cancelButton = document.querySelector('.modal-footer .btn-outline');
        const viewButtons = document.querySelectorAll('.view-btn');
        // const modal1 = document.getElementById('paymentRequestModal');

        function openModal() {
          modal.classList.add('active');
        }

        function closeModal() {
          modal.classList.remove('active');
        }

        editButtons.forEach(button => {
          button.addEventListener('click', openModal);
        });

        viewButtons.forEach(button => {
            button.addEventListener('click', openModal);
        });

        addButton.addEventListener('click', openModal);
        modalClose.addEventListener('click', closeModal);
        cancelButton.addEventListener('click', closeModal);


        window.addEventListener('click', (e) => {
          if (e.target === modal) {
            closeModal();
          }
        });
    </script>
    <script>
        // Sidebar toggle
        const sidebarToggle = document.querySelector('.sidebar-toggle');
        const dashboardWrapper = document.querySelector('.dashboard-wrapper');

        sidebarToggle.addEventListener('click', () => {
          dashboardWrapper.classList.toggle('sidebar-collapsed');
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
                   const searchInput = document.querySelector('.restaurant-search');
                   const planSelect = document.querySelector('.plan-filter');
                   const statusSelect = document.querySelector('.status-filter');
                   const tableRows = document.querySelectorAll('#order-listing tbody tr');

            function normalize(text) {
                return text.toLowerCase().trim();
            }

            function filterTable() {
                const searchTerm = normalize(searchInput.value);
                const selectedPlan = normalize(planSelect.value);
                const selectedStatus = normalize(statusSelect.value);

                tableRows.forEach(row => {
                    const name = normalize(row.querySelector('.restaurant-name').textContent);
                    const plan = normalize(row.querySelector('.plan-badge').textContent);
                    const status = normalize(row.querySelector('.status-badge').textContent);

                    const matchesSearch = name.includes(searchTerm);
                    const matchesPlan = !selectedPlan || plan === selectedPlan;
                    const matchesStatus = !selectedStatus || status === selectedStatus;

                    if (matchesSearch && matchesPlan && matchesStatus) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            searchInput.addEventListener('input', filterTable);
            planSelect.addEventListener('change', filterTable);
            statusSelect.addEventListener('change', filterTable);
        });
    </script>
    <script>
        const rowsPerPage = 5; // Number of rows per page
        const table = document.getElementById("order-listing");
        const rows = table.querySelectorAll("tbody tr");
        const prevBtn = document.getElementById("prevPage");
        const nextBtn = document.getElementById("nextPage");
        const pageIndicator = document.getElementById("page-indicator");

        let currentPage = 1;
        const totalPages = Math.ceil(rows.length / rowsPerPage);

        function showPage(page) {
          const start = (page - 1) * rowsPerPage;
          const end = start + rowsPerPage;

          rows.forEach((row, index) => {
            row.style.display = index >= start && index < end ? "" : "none";
          });

          pageIndicator.textContent = `Page ${page}`;
          prevBtn.disabled = page === 1;
          nextBtn.disabled = page === totalPages;
        }

        prevBtn.addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            showPage(currentPage);
          }
        });

        nextBtn.addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            showPage(currentPage);
          }
        });

        // Initial render
        showPage(currentPage);
    </script>


</body>
